textures:
    airports:
        url: Sprites@2x.png
        density: 2
        sprites:
            controlled: [0,0,64,64]
            uncontrolled: [64,0,64,64]
            aircraft: [128,0,64,64]
lights:
    light1:
        type: ambient
        ambient: 0
    directional1:
        type: directional
        direction: [1, -.6, -.5]
        diffuse: [1.000, 1, 1]
    directional2:
        type: directional
        direction: [-1, -.4, -.5]
        diffuse: [1,1, 1]
scene:
    background:
        color: '#333'
styles:
    icons:
        base: points
        lighting: false
        draw:
            sprite: function() { return feature.kind; }
            sprite_default: controlled
            texture: airports

    elevation:
        base: raster
        lighting: false
        shaders:
            blocks:
                global: |
                    float unpack(vec4 h) {
                        // GPU reads each 0-255 channel as range 0-1, right where we want it
                        // assemble to get height
                        return (h.r * 1. + h.g / 256. + h.b / 65536.);
                    }
                color: |
                    float height = unpack(color);
                    color = vec4(1.0);
                    // Color ramps
                    vec3 colors[8];
                    colors[0] = vec3(.78,.84,.70);
                    colors[1] = vec3(.73,.78,.65);
                    colors[2] = vec3(.97, .96, .79);
                    colors[3] = vec3(.96, .91, .65);
                    colors[4] = vec3(.92, .84, .62);
                    colors[5] = vec3(.92, .74, .42);
                    colors[6] = vec3(.78, .54, .23);
                    colors[7] = vec3(.46, .34, .29);

                    float step1 = 0.5066; // bottom
                    float step2 = 0.5112;
                    float step3 = 0.516;
                    float step4 = 0.5265;
                    float step5 = 0.535;
                    float step6 = 0.545;
                    float step7 = 0.559;
                    float step8 = 0.57;
                    
                    color.rgb = mix(colors[0], colors[1], step(step1, height));
                    color.rgb = mix(color.rgb, colors[2], step(step2, height));
                    color.rgb = mix(color.rgb, colors[3], step(step3, height));
                    color.rgb = mix(color.rgb, colors[4], step(step4, height));
                    color.rgb = mix(color.rgb, colors[5], step(step5, height));
                    color.rgb = mix(color.rgb, colors[6], step(step6, height));
                    color.rgb = mix(color.rgb, colors[7], step(step7, height));

                    // color.rgb = mix(colors[0], colors[1], smoothstep(step1, step2, height));
                    // color.rgb = mix(color.rgb, colors[2], smoothstep(step2, step3, height));
                    // color.rgb = mix(color.rgb, colors[3], smoothstep(step3, step4, height));
                    // color.rgb = mix(color.rgb, colors[4], smoothstep(step4, step5, height));
                    // color.rgb = mix(color.rgb, colors[5], smoothstep(step5, step6, height));
                    // color.rgb = mix(color.rgb, colors[6], smoothstep(step6, step7, height));
                    // color.rgb = mix(color.rgb, colors[7], smoothstep(step7, step8, height));
    hillshade:
        base: raster
        raster: normal
        blend: translucent
        shaders:
            uniforms:
                mult: 2.5
            blocks:
                global: |
                    float getGrayscale(vec3 p) { 
                        float alpha = 1.0 - ((p.r + p.g + p.b) / 3.0);
                        if (alpha >= 0.5) {
                            alpha = .5;
                        }
                        return alpha; 
                    }
                normal: |
                    normal = normal * mult - (mult - 1.);
                filter: |
                    color.rgba = vec4(0, 0, 0, getGrayscale(color.rgb));
        

sources:
    nextzen:
        type: GeoJSON
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.json
        url_params:
            api_key: J340hxOHS_qfDrYU1iUIGg
        max_zoom: 16
        tile_size: 512
    nextzen_k:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: J340hxOHS_qfDrYU1iUIGg
        max_zoom: 16
    openaip:
        type: MVT
        url: https://storage.googleapis.com/tiles.myflightdeck.net/airspace/airspace/{z}/{x}/{y}.pbf
        max_zoom: 10
    elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/256/terrarium/{z}/{x}/{y}.png
        url_params:
            api_key: J340hxOHS_qfDrYU1iUIGg
        max_zoom: 14
    normals:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/256/normal/{z}/{x}/{y}.png
        url_params:
            api_key: J340hxOHS_qfDrYU1iUIGg
        max_zoom: 14
    airports:
        type: MVT
        url: https://storage.googleapis.com/tiles.myflightdeck.net/airports/{z}/{x}/{y}.pbf
        max_zoom: 6
        min_zoom: 6

layers:
    terrain:
        data: { source: elevation, layer: _default }
        draw:
            elevation:
                order: 0
    
    hillsides:
        data: { source: normals, layer: _default }
        draw:
            hillshade:
                order: 1

    water:
        data: { source: nextzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: '#c8e3ea'
    boundaries:
        data: { source: nextzen }
        country:
            filter: {kind: country }
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: '#333333'
                    width: [[3, 2px],[6,3px]]
        state:
            filter: {kind: region, $zoom: {min: 5}}
            draw:
                lines:
                    dash: [5, 2, 3, 2, 3, 2]
                    order: function() { return feature.sort_rank; }
                    color: '#333333'
                    width: 2.5px

    landuse:
        data: { source: nextzen}
        grass:
            filter:
                kind: grass
            draw:
                polygons:
                    order: function() { return feature.sort_rank; }
                    color: green
        runway:
            filter: {kind: [runway]}
            draw:
                polygons:
                    color: [0.173, 0.173, 0.173, 1.00]
                    order: function() { return 300; }
        apron:
            filter: {kind: [apron]}
            draw:
                polygons:
                    color: '#434343'
                    order: function() { return feature.sort_rank; }
        cities:
            filter: {kind: ['urban_area', 'urban', 'commercial'], $zoom: {max: 9}}
            draw:
                lighting: false
                polygons:
                    color: '#f8f765'
                    order: function() { return feature.sort_rank; }
                    
    airspace:
        data: {source: openaip }
        b:
            filter: { kind: b }
            draw:
                lines:
                    order: 1000
                    color: '#2e73b7'
                    width:
                    - - 9
                      - 2.0px
                    - - 12
                      - 5.25px
                    - - 14
                      - 5.6px
                    - - 15
                      - 5.20px
                    - - 16
                      - 5.25px
                    - - 17
                      - 50m
                text:
                    text_source: |
                        function () {
                            return 'B: ' + feature.lower + '-' + feature.upper;
                        }
                    anchor: [bottom, top]
                    offset: [0, -12t]
                    collide: true
                    optional: true
                    font:
                        size: 12pt
                        family: Helvetica
                        fill: white
                        stroke:
                            color: '#2e73b7'
                            width: 3px

        c:
            filter: { kind: c }
            draw:
                lines:
                    order: 1000
                    color: '#892758'
                    width:
                    - - 9
                      - 2.0px
                    - - 12
                      - 5.25px
                    - - 14
                      - 5.6px
                    - - 15
                      - 5.20px
                    - - 16
                      - 5.25px
                    - - 17
                      - 50m
                text:
                    text_source: |
                        function () {
                            return 'C:' + feature.lower + '-' + feature.upper;
                        }
                    anchor: [bottom, top]
                    offset: [0, -12t]
                    collide: true
                    optional: true
                    font:
                        size: 12pt
                        family: Helvetica
                        fill: white
                        stroke:
                            color: '#892758'
                            width: 3px
        d:
            filter: { kind: d }
            draw:
                lines:
                    dash: [3, 2]
                    order: 1000
                    color: '#2e73b7'
                    width:
                    - - 9
                      - 1.0px
                    - - 12
                      - 2.25px
                    - - 14
                      - 2.6px
                    - - 15
                      - 2.15px
                    - - 16
                      - 2.25px
                    - - 17
                      - 12m
        danger:
            filter: { kind: danger }
            draw:
                lines:
                    visible: false
                    order: 1000
                    color: red
                    width:
                    - - 9
                      - 1.0px
                    - - 12
                      - 1.25px
                    - - 14
                      - 1.6px
                    - - 15
                      - 0.15px
                    - - 16
                      - 5.25px
                    - - 17
                      - 12m
    airports:
        data:
            source: airports
        filter: {not: {kind: [closed, heliport]}, $zoom: {max: 17}}

        large_airport:
            filter: {kind: large_airport, $zoom: {min: 6}}
            draw:
                icons:
                    order: 2000
                    priority: 2
                    interactive: true
                    sprite: controlled
                    cull_from_tile: false
                    collide: true
                    visible: function() { return feature.icao !== ""; }
                    text:
                        text_source: function() { return feature.icao; }
                        collide: global.collide
                        optional: true
                        anchor: [bottom, top, right, left, bottom-right, bottom-left, top-right, top-left]
                        font:
                            size: 12pt
                            family: Helvetica
                            fill: white
                            stroke:
                                color: black
                                width: 3px
        medium_airport:
            filter: {kind: medium_airport, $zoom: {min: 8}}
            draw:
                icons:
                    order: 2000
                    priority: 3
                    interactive: true
                    sprite: |
                        function () {
                            if (feature.atc)
                                return "controlled"
                            else
                                return "uncontrolled"
                        }
                    cull_from_tile: false
                    collide: true
                    visible: function() { return feature.icao !== ""; }
                    text:
                        text_source: function() { return feature.icao; }
                        collide: global.collide
                        optional: true
                        anchor: [bottom, top, right, left, bottom-right, bottom-left, top-right, top-left]
                        font:
                            size: 12pt
                            family: Helvetica
                            fill: white
                            stroke:
                                color: black
                                width: 3px
        small_airport:
            filter: {kind: small_airport, $zoom: {min: 10}}
            draw:
                icons:
                    order: 2000
                    priority: 4
                    interactive: true
                    sprite: |
                        function () {
                            if (feature.atc)
                                return "controlled"
                            else
                                return "uncontrolled"
                        }
                    cull_from_tile: false
                    collide: true
                    visible: function() { return feature.icao !== ""; }
                    text:
                        text_source: function() { return feature.icao; }
                        collide: global.collide
                        optional: true
                        anchor: [bottom, top, right, left, bottom-right, bottom-left, top-right, top-left]
                        font:
                            size: 12pt
                            family: Helvetica
                            fill: white
                            stroke:
                                color: black
                                width: 3px
    roads:
        data: { source: nextzen }
        filter:
            not: { kind: [path, rail, ferry] }
        aeroway:
            filter:
                kind: aeroway
                kind_detail: taxiway
            draw:
                lines:
                    blend: overlay
                    order: 130
                    color: '#ffcc00'
                    width: 5
                    outline:
                        color: black
                        width: 2
        hold_short:
            filter:
                kind: aeroway
                kind_detail: holding_position
            draw:
                lines:
                    blend: overlay
                    order: 132
                    color: '#ffcc00'
                    width: 7
        runway:
            filter:
                kind: aeroway
                kind_detail: runway
            draw:
                lines:
                    order: 125
                    color: white
                    cap: square
                    width:
                    - - 9
                      - 300m
                    - - 13
                      - 25m
                    outline:
                        color: black
                        width:
                        - - 9
                          - 200m
                        - - 13
                          - 0
        draw:
            lines:
                order: function() { return feature.sort_rank; }
                color: gray
                width: 8
                cap: round
        highway:
            filter: { kind: [highway], $zoom: { min: 7 } }
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: grey
                    width:
                    - - 4
                      - 2px
                    - - 6
                      - 2px
                    - - 8
                      - 2px
                    - - 10
                      - 2px
                    - - 13
                      - 20m
        minor_road:
            filter: { kind: [minor_road], $zoom: { min: 13 }}
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: grey
                    width: 5
    pois:
        data: { source: nextzen }
        gates:
            filter:
                kind: aeroway_gate
            draw:
                points:
                    priority: 1
                    interactive: true
                    color: [0.071, 0.996, 0.992, 1.00]
                    size: 8px
                    cull_from_tile: false
                    collide: false
                    text:
                        text_source: function() { return feature.ref; }
                        collide: global.collide
                        optional: true
                        anchor: [bottom, top, right, left, bottom-right, bottom-left, top-right, top-left]
                        font:
                            size: 11pt
                            family: Lucida Grande
                            fill: white
    buildings:
        data: { source: nextzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: |
                    function () {
                        var h = feature.height || 20;
                        h = Math.min((h + 50)/ 255, .8); // max brightness: .8
                        h = Math.max(h, .4); // min brightness: .4
                        return [h, h, h];
                    }
        3d-buildings:
            filter: { $zoom: { min: 15 } }
            draw:
                polygons:
                    extrude: function () { return feature.height > 20 || $zoom >= 16; }
    road_labels:
        data: { source: nextzen, layer: roads }
        taxiways:
            filter: { kind_detail: taxiway, $zoom: { min: 15 } }
            draw:
                text:
                    text_source: |
                        function () {
                            if (!feature.name)
                                return feature.ref;
                            else
                                return feature.name;
                        }
                    font:
                        fill: white
                        weight: 500
                        size: 12px
                        family: Helvetica
                        stroke: { color: black, width: 3 }
        runways:
            filter: { kind_detail: runway, $zoom: { min: 12 } }
            draw:
                text:
                    text_source: |
                        function () {
                            if (!feature.ref)
                                return feature.name;
                            else
                                return feature.ref;
                        }
                    font:
                        fill: white
                        weight: 500
                        size: 15px
                        family: Helvetica
                        stroke: { color: black, width: 3 }
        aeroway:
            filter: { kind: aeroway_gate }
            draw:
                text:
                    font:
                        fill: white
                        weight: 500
                        size: 12px
                        family: Helvetica
    aircraft:
        data: { source: aircraft }
        draw:
            icons:
                order: 3000
                priority: 1
                angle: function() { return feature.heading; }
                interactive: true
                collide: false
                sprite: "aircraft"
                color: "#00f98e"
                text:
                    collide: false
                    text_source: function() { return feature.callsign; }
                    anchor: [bottom, top, right, left, bottom-right, bottom-left, top-right, top-left]
                    font:
                        size: 11pt
                        family: Lucida Grande
                        fill: "#00f98e"
                        stroke: { color: black, width: 3 }
